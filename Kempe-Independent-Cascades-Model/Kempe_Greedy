def KempeGreedy(graph, num_seed_nodes, prob=0.2, n_iters=100):
   #Solution gives 2 parameters: the selected seed set for which we found the maximum influence & their influences
   #Here we used this method for Networkx Directed Graph
    max_spreads = []
    ultimate_seed_set = []
 
    for _ in range(num_seed_nodes):
        best_node = -1
        best_spread = -np.inf

       
        nods = graph.nodes - ultimate_seed_set;

        for node in nods:
            each_infl  = IC(g, ultimate_seed_set + [node], prob, n_iters)
            if each_infl  > best_spread:
                best_spread = each_infl 
                best_node = node

        ultimate_seed_set.append(best_node)
        max_spreads.append(best_spread)
    return ultimate_seed_set, max_spreads

#num_seed_nodes=how many nodes we want for our best seed set.
num_seed_nodes = 2
prob = 0.2


g=nx.read_edgelist('data-file.txt',create_using=nx.DiGraph());
greedy_solution, greedy_spreads = KempeGreedy(g, num_seed_nodes, prob)
print('solution: ', greedy_solution)
print('spreads: ', greedy_spreads)
