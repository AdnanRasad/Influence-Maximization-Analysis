# Adnan Rasad
import networkx as nx
import numpy as np


def IC(Networkx_Graph,Seed_Set,Probability,Num_of_Simulations):
    spread = []
    for i in range(Num_of_Simulations):
        
        new_active, Ans = Seed_Set[:], Seed_Set[:]
        while new_active:
            #Getting neighbour nodes of newly activate node
            targets = Neighbour_finder(Networkx_Graph,Probability,new_active)
    
            #Calculating if any nodes of those neighbours can be activated, if yes add them to new_ones.
            np.random.seed(i)
            success = np.random.uniform(0,1,len(targets)) < Probability
            new_ones = list(np.extract(success, sorted(targets)))
            
            #Checking which ones in new_ones are not in our Ans...only adding them to our Ans so that no duplicate in Ans.
            new_active = list(set(new_ones) - set(Ans))
            Ans += new_active
            
        spread.append(len(Ans))
        
    return(np.mean(spread))
    
    
    
def Neighbour_finder(g,p,new_active):
    
    targets = []
    for node in new_active:
        targets += g.neighbors(node)

    return(targets)


def KempeGreedy(graph, num_seed_nodes, prob=0.2, n_iters=100):
   #Solution gives 2 parameters: the selected seed set for which we found the maximum influence & their influences
   #Here we used this method for Networkx Directed Graph
    max_spreads = []
    ultimate_seed_set = []
 
    for _ in range(num_seed_nodes):
        best_node = -1
        best_spread = -np.inf

       
        nods = graph.nodes - ultimate_seed_set;

        for node in nods:
            each_infl  = IC(g, ultimate_seed_set + [node], prob, n_iters)
            if each_infl  > best_spread:
                best_spread = each_infl 
                best_node = node

        ultimate_seed_set.append(best_node)
        max_spreads.append(best_spread)
    return ultimate_seed_set, max_spreads


k = 2
prob = 0.2
n_iters = 100
g = nx.read_edgelist('sampleGraph.txt', create_using=nx.DiGraph());
greedy_solution, greedy_spreads = KempeGreedy(g, k, prob, n_iters)
print('Seed Set: ', greedy_solution)
print('Maximum_Influences: ', greedy_spreads)
